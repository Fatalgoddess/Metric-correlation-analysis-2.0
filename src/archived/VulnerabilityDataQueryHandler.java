package archived;

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;

import static com.mongodb.client.model.Filters.*;

import java.util.ArrayList;

import org.bson.Document;
import org.junit.Test;

/**
 * @author Antoniya Ivanova Defines the vulnerability database queries
 *
 */

public class VulnerabilityDataQueryHandler {
	
	private MongoClient mongoClient;
	private MongoDatabase database;
	private MongoCollection<Document> coll;
	
	public VulnerabilityDataQueryHandler(){
		mongoClient = MongoClients.create();
		database = mongoClient.getDatabase(VulnerabilityDataToMongoImporter.vulnerabilityDatabaseName);
		coll = database.getCollection(VulnerabilityDataToMongoImporter.vulnerabilityDatabaseCollectionName);
	}
	
	/**
	 * Get the vulnerabilities for a given (product,version) tuple.
	 * @param product - product name
	 * @param version - version name as string or * for all. 
	 * Leave version empty to get all product vulnerabilities.
	 * @return An ArrayList of the resulting documents from the database
	 */
	protected ArrayList<Document> getVulnerabilities(String product, String version) {
		ArrayList<Document> results;
		
		if(version != "") {
			System.out.println("Searching for vulnerabilities of: " + product + ", version " + version + ".");
			
			results = (ArrayList<Document>) coll
					.find(Filters.and(eq("product", product), or(eq("versions", version), eq("versions", "*"))))
					.into(new ArrayList<Document>());
		} else {
			System.out.println("Searching for vulnerabilities of: " + product + " without version information.");
			
			results = (ArrayList<Document>) coll
					.find(Filters.eq("product", product))
					.into(new ArrayList<Document>());
		}
		
		if(results.isEmpty()) {
			System.out.println("No vulnerabilities found for " + product + " " + version);
		} else {
			for (Document document : results) {
				System.out.println("Found vulnerability: ");
				System.out.println(document.toString());
			}
		}
		return results;
	}
	
	/**
	 * Get the average for a given property and result array from the database
	 * @param documents - the result array
	 * @param property - the property to average
	 * @return a double value for the average
	 */
	protected double getAverage(ArrayList<Document> documents, String property) {
		double total = 0;
		int size = documents.size();
		
		for (Document document : documents) {
			total += (double) document.get(property);
		}
		
		return total/size;
	}
	
	protected double getAverageCVSS3Score(String product, String version) {
		ArrayList<Document> results = getVulnerabilities(product, version);
		return getAverage(results,"cvss3_baseScore");
	}
	
	protected double getAverageCVSS2Score(String product, String version) {
		ArrayList<Document> results = getVulnerabilities(product, version);
		return getAverage(results,"cvss2_baseScore");
	}
	
	protected int getNumberOfVulnerabilities(String product, String version) {
		ArrayList<Document> results = getVulnerabilities(product, version);
		return results.size();
	}

	@Test
	public void testVulnerabilitySearch() {
		//TODO: Maybe write a method which returns everything at once.
		
		System.out.println(getVulnerabilities("wowroster", ""));
		System.out.println(getNumberOfVulnerabilities("wowroster", "1.5"));
		System.out.println(getAverageCVSS2Score("wowroster", "1.5"));
		System.out.println(getAverageCVSS3Score("wowroster", "1.5"));
		System.out.println(getVulnerabilities("spring-boot", ""));
	}
	
}
