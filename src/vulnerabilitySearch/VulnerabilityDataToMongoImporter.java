package vulnerabilitySearch;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.bson.Document;
import org.junit.Test;

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Indexes;
import com.mongodb.client.MongoClient;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.stream.JsonReader;

/**
 * @author Antoniya Ivanova Downloads the NVD JSON feeds
 */

public class VulnerabilityDataToMongoImporter {

	private static String feedsLocation = "JSONfeeds";
	protected static String vulnerabilityDatabaseName = "VulnerabilityDatabase";
	protected static String vulnerabilityDatabaseCollectionName = "Vulnerabilities";
	
	protected utils.FileUtils fileUtils = new utils.FileUtils();

	/**
	 * Gets the JSON feeds URL from the NVD web site
	 */
	private ArrayList<URL> getJSONFeedURLs() {
		URL url;
		InputStream is = null;
		BufferedReader br;
		String line;

		ArrayList<URL> urls = new ArrayList<>();
		String result = "";
		URL resultURL = null;

		try {
			url = new URL("https://nvd.nist.gov/vuln/data-feeds#JSON_FEED");
			is = url.openStream(); // throws an IOException
			br = new BufferedReader(new InputStreamReader(is));

			while ((line = br.readLine()) != null) {
				if (line.contains(".json.zip")) {
					result = line.trim().replace("<a href='", "");
					result = result.replace("' target='_blank'>ZIP</a>", "");

					resultURL = new URL(result);
					urls.add(resultURL);
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (is != null)
					is.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return urls;
	}

	/**
	 * Downloads the JSON feeds from the NVD web site
	 */
	private void downloadJSONFeeds() {
		fileUtils.createDirectory(feedsLocation);
		ArrayList<URL> urls = getJSONFeedURLs();

		for (Iterator<URL> iterator = urls.iterator(); iterator.hasNext();) {
			URL url = iterator.next();
			String fileName = url.toString().substring(40);
			System.out.println("Downloading " + fileName);

			try {
				FileUtils.copyURLToFile(url, new File(feedsLocation + File.separator + fileName));
			} catch (IOException e) {
				e.printStackTrace();
			}

			String unzipLocation = feedsLocation;
			String zipFilePath = feedsLocation + File.separator + fileName;
			System.out.println("Unzipping " + fileName);
			fileUtils.unzip(zipFilePath, unzipLocation);
		}

		System.out.println("Download finished");

		System.out.println("Deleting ZIP files");
		File[] ZIPfiles = new File(feedsLocation).listFiles();
		for (File file : ZIPfiles) {
			if (file.getName().contains("zip") || file.getName().contains("modified") || file.getName().contains("recent"))
				file.delete();
		}

	}

	/**
	 * Parses the JSON files in {@value feedsLocation}
	 * 
	 * @return An ArrayList of Documents to be added to the Mongo database
	 */
	private ArrayList<Document> parseJSONFilesToDocuments() {
		ArrayList<Document> documentsForMongo = new ArrayList<Document>();
		File[] jsonFiles = new File(feedsLocation).listFiles();

		for (File file : jsonFiles) {
			try {
				Gson gson = new GsonBuilder().create();
				JsonReader jsonReader = new JsonReader(
						new InputStreamReader(new FileInputStream((file.getPath())), "UTF-8"));

				Vulnerability vulnerabilityFile = gson.fromJson(jsonReader, Vulnerability.class);
				List<vulnerabilitySearch.CVEItem> vulnerabilities = vulnerabilityFile.getCVEItems();

				for (CVEItem cveItem : vulnerabilities) {

					// If there is no vendor or version data, ignore the CVE
					if (!(cveItem.getCve().getAffects().getVendor().getVendorData().isEmpty()
							|| (cveItem.getImpact().getBaseMetricV2().getImpactScore().isNaN())
									&& cveItem.getImpact().getBaseMetricV3().getImpactScore().isNaN())) {

						String ID = cveItem.getCve().getCVEDataMeta().getID();
						String vendor = cveItem.getCve().getAffects().getVendor().getVendorData().get(0).getVendorName()
								.toString();
						String product = cveItem.getCve().getAffects().getVendor().getVendorData().get(0).getProduct()
								.getProductData().get(0).getProductName().toString();
						List<VersionDatum> versionDatum = cveItem.getCve().getAffects().getVendor().getVendorData()
								.get(0).getProduct().getProductData().get(0).getVersion().getVersionData();
						List<String> versions = new ArrayList<String>();

						for (VersionDatum version : versionDatum) {
							versions.add(version.getVersionValue());
						}

						double cvss3 = 0, cvss2 = 0;
						if (cveItem.getImpact().getBaseMetricV3() != null) {
							cvss3 = cveItem.getImpact().getBaseMetricV3().getCvssV3().getBaseScore();
						}
						if (cveItem.getImpact().getBaseMetricV2() != null) {
							cvss2 = cveItem.getImpact().getBaseMetricV2().getCvssV2().getBaseScore();
						}
						System.out.println("Inserting entry: " + ID);

						Document doc = new Document("_id", ID).append("vendor", vendor).append("product", product)
								.append("versions", versions).append("cvss2_baseScore", cvss2)
								.append("cvss3_baseScore", cvss3);
						documentsForMongo.add(doc);
					}
				}
			} catch (Exception e) {
				System.err.println("Error parsing JSON vulnerability file!");
				e.printStackTrace();
			}
		}

		return documentsForMongo;
	}

	/**
	 * Adds a list of Documents to a Mongo Database
	 */
	private void addDocumentsToMongo() {
		ArrayList<Document> documents = parseJSONFilesToDocuments();
		MongoClient mongoClient = MongoClients.create();
		MongoDatabase database = mongoClient.getDatabase(vulnerabilityDatabaseName);
		MongoCollection<Document> coll = database.getCollection(vulnerabilityDatabaseCollectionName);

		System.out.println("Inserting " + documents.size() + " into database.");
		coll.insertMany(documents);
		System.out.println("Indexing ascending on (product,version).");
		coll.createIndex(Indexes.ascending("product", "version"));
	}

	@Test
	public void InitializeVulnerabilityDatabase() {
		downloadJSONFeeds();
		addDocumentsToMongo();

		try {
			System.out.println("Deleting raw JSONFeeds files.");
			FileUtils.deleteDirectory(new File(feedsLocation));
		} catch (IOException e) {
			System.err.println("Couldn't delete the JSON feeds");
			e.printStackTrace();
		}
	}
}
