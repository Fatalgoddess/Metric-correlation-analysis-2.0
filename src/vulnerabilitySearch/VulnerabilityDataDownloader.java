package vulnerabilitySearch;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.commons.io.FileUtils;
import org.bson.Document;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Test;

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ConnectionString;
import com.mongodb.ServerAddress;
import com.mongodb.MongoCredential;
import com.mongodb.MongoClientOptions;

public class VulnerabilityDataDownloader {

	protected static String feedsLocation = "JSONfeeds";

	public static File createDirectory(String directoryPath) throws IOException {
		File dir = new File(directoryPath);
		if (dir.exists()) {
			return dir;
		}
		if (dir.mkdirs()) {
			return dir;
		}
		throw new IOException("Failed to create directory '" + dir.getAbsolutePath() + "' for an unknown reason.");
	}

	public static void unzip(final String zipFilePath, final String unzipLocation) throws IOException {

		if (!(Files.exists(Paths.get(unzipLocation)))) {
			Files.createDirectories(Paths.get(unzipLocation));
		}
		try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipFilePath))) {
			ZipEntry entry = zipInputStream.getNextEntry();
			while (entry != null) {
				Path filePath = Paths.get(unzipLocation, entry.getName());
				if (!entry.isDirectory()) {
					unzipFiles(zipInputStream, filePath);
				} else {
					Files.createDirectories(filePath);
				}

				zipInputStream.closeEntry();
				entry = zipInputStream.getNextEntry();
			}
		}
	}

	public static void unzipFiles(final ZipInputStream zipInputStream, final Path unzipFilePath) throws IOException {

		try (BufferedOutputStream bos = new BufferedOutputStream(
				new FileOutputStream(unzipFilePath.toAbsolutePath().toString()))) {
			byte[] bytesIn = new byte[1024];
			int read = 0;
			while ((read = zipInputStream.read(bytesIn)) != -1) {
				bos.write(bytesIn, 0, read);
			}
		}

	}

	private ArrayList<URL> getJSONFeedURLs() throws IOException {
		URL url;
		InputStream is = null;
		BufferedReader br;
		String line;

		ArrayList<URL> urls = new ArrayList<>();
		String result = "";
		URL resultURL = null;

		try {
			url = new URL("https://nvd.nist.gov/vuln/data-feeds#JSON_FEED");
			is = url.openStream(); // throws an IOException
			br = new BufferedReader(new InputStreamReader(is));

			while ((line = br.readLine()) != null) {
				if (line.contains(".json.zip")) {
					result = line.trim().replace("<a href='", "");
					result = result.replace("' target='_blank'>ZIP</a>", "");

					resultURL = new URL(result);
					urls.add(resultURL);
				}

			}

		} catch (MalformedURLException mue) {
			mue.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} finally {
			try {
				if (is != null)
					is.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}

		return urls;
	}

	private void downloadJSONFeeds() throws IOException {
		createDirectory(feedsLocation);
		ArrayList<URL> urls = getJSONFeedURLs();

		for (Iterator<URL> iterator = urls.iterator(); iterator.hasNext();) {
			URL url = iterator.next();
			String fileName = url.toString().substring(40);
			System.out.println("Downloading" + fileName);
			FileUtils.copyURLToFile(url, new File(feedsLocation + File.separator + fileName));

			String unzipLocation = feedsLocation;
			String zipFilePath = feedsLocation + File.separator + fileName;
			System.out.println("Unzipping" + fileName);
			unzip(zipFilePath, unzipLocation);
		}

		System.out.println("Download finished");

		System.out.println("Deleting ZIP files");
		File[] ZIPfiles = new File(feedsLocation).listFiles();
		for (File file : ZIPfiles) {
			if (file.getName().contains("zip"))
				file.delete();
		}

	}
	
	protected String convertJSONFilesToStrings() throws IOException {
		ArrayList<String> resultArray = new ArrayList<String>();
		String result = "";
		//try file reader
		JSONParser parser = new JSONParser();
		File[] jsonFiles = new File(feedsLocation).listFiles();
		for (File file : jsonFiles) {
	        try {
	            Object obj = parser.parse(new FileReader(file));
	            JSONObject jsonObject = (JSONObject) obj;
	            result = jsonObject.toString();
	            resultArray.add(result);
	            System.out.println("Added" + file);
	            break;
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } catch (ParseException e) {
	            e.printStackTrace();
	        }
		}
		
		return resultArray.get(0);
	}
	
	@Test
	public void addJSONsToMongo() {
	    MongoClient mongoClient = MongoClients.create();
	    MongoDatabase database = mongoClient.getDatabase("VulnerabilityDB");
	    MongoCollection<Document> coll = database.getCollection("Vulnerabilities");
	    
	    //ArrayList<String> 
//	    String JSONtoInsert = null;
//	    
//	    try {
//			JSONtoInsert = convertJSONFilesToStrings();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//	    //for(String JSONString : JSONtoInsert) {
//	    	Document doc = Document.parse(JSONtoInsert);
//	    			//JSONString);
//	    	coll.insertOne(doc);
//	    //}
//	    
	    
	    for (String name : database.listCollectionNames()) {
	        System.out.println(name);
	    }
	    System.out.println(coll.count());
	}
}
