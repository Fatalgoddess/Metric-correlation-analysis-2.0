package vulnerabilitySearch;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import org.junit.jupiter.api.Test;

public class CVESearchController {

	public static boolean windows = System.getProperty("os.name").toLowerCase().indexOf("windows") >= 0;
	public static boolean linux = System.getProperty("os.name").toLowerCase().indexOf("linux") >= 0;

	// TODO: Make eclipse recognize environment variables
	private final String env_mongod = "/usr/bin/mongod"; // "MONGOD"
	private final String cve_search = "~/Documents/Tools/cve-search-master"; // CVE SEARCH
	private String vulnerability_database_location = "VulnerabilityData";

	public static File createDirectory(String directoryPath) throws IOException {
		File dir = new File(directoryPath);
		if (dir.exists()) {
			return dir;
		}
		if (dir.mkdirs()) {
			return dir;
		}
		throw new IOException("Failed to create directory '" + dir.getAbsolutePath() + "' for an unknown reason.");
	}

	private Process startMongoDB(String databaseLocation, Process p) throws IOException {
		ProcessBuilder pb = new ProcessBuilder(env_mongod, "--storageEngine=mmapv1", "--dbpath",
				vulnerability_database_location);
		pb.redirectErrorStream(true);

		try {
			p = pb.start();
			// System.out.println("MongoDB Process.isAlive() returns : " + p.isAlive());

			// Check if mongo started OK
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String line;
			while ((line = br.readLine()) != null) {
				if (line.contains("shutting down") || line.contains("failed")) {
					p.destroyForcibly();
					throw new IOException(line);
				}
				if (line.contains("waiting")) {
					System.out.println("MongoDB: " + line);
					break;
				}
				System.out.println("MongoDB: " + line);
			}
		} catch (IOException e) {
			System.err.println("Could not start MongoDB Process!");
			e.printStackTrace();
		}

		return p;
	}

	private void initializeVulnerabilityDatabase() throws IOException {

		File vulnerabilityFolder = new File(vulnerability_database_location);
		if (vulnerabilityFolder.exists() && vulnerabilityFolder.list().length > 1) {
			updateVulnerabilityDatabase();
		} else {

			if (windows) {
				// TODO: Add windows command
			}
			
			else if (linux) {
				try {
					ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c", "cd", cve_search,
							" && ./sbin/db_mgmt.py -p");
					Process v = pb.start();

					System.out.println("Initializing vulnerability database...");
					v.waitFor();
					System.out.println("Vulnerability database initialized!");

				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					System.err.println("Could not initialize vulnerability database.");
				}
			}

			else {
				System.err.println("Unsupported OS at vulnerability database initialization.");
			}
		}
	}

	//TODO: This always gets invoked instead of the init method
	private void updateVulnerabilityDatabase() throws IOException {
		if (windows) {
			// TODO: Add windows command
		}

		else if (linux) {
			try {
				ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c", "cd", cve_search, " && ./sbin/db_updater.py");
				Process v = pb.start();

				System.out.println("Updating vulnerability database...");
				v.waitFor();
				System.out.println("Vulnerability database updated!");

			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				System.err.println("Could not update vulnerability database.");
			}
		}

		else {
			System.err.println("Unsupported OS at vulnerability database update.");
		}
	}

	@Test
	public void execute() throws IOException {
		createDirectory(vulnerability_database_location);

		Process p = null;
		p = startMongoDB(vulnerability_database_location, p);

		initializeVulnerabilityDatabase();

		// close the database
		System.out.println("Shutting down MongoDB");
		p.destroyForcibly();
	}

}
