package vulnerabilitySearch;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import org.bson.Document;
import org.junit.Test;

public class VulnerabilitySearchMethodComparator {
	
	private String controlResultsFileLocation = "SearchMethodComparisonResources/bt-data-githubname-cve.csv";
	private VulnerabilityDataQueryHandler VDQH = new VulnerabilityDataQueryHandler();
	
	/**
	 * A class for representing search results for the vulnerability search
	 * @param productName the name of the project/product to search for
	 * @param cveIDs a list of found CVE's for this project with their 
	 * CVE ID's.
	 */
	class VulnerabilitySearchResult implements Comparable<VulnerabilitySearchResult>{
		
		private String productName;
		private ArrayList<String> cveIDs;
		
		public VulnerabilitySearchResult(String productName, ArrayList<String> cves) {
			this.productName = productName;
			this.cveIDs = cves;
		}
		
		@Override
		public int compareTo(VulnerabilitySearchResult vulnerabilityRes) {
			int firstListSize = this.cveIDs.size();
			int secondListSize = vulnerabilityRes.getCveIDs().size();
			if(firstListSize != secondListSize)
				return 0;
			
			boolean allVulnerabilitiesMatch = false;
			int counter = 0;
			
			for (String cveId : this.cveIDs) {
				if(vulnerabilityRes.getCveIDs().contains(cveId))
					counter++;
			}
			
			if(counter == firstListSize)
				allVulnerabilitiesMatch = true;
			
			return((vulnerabilityRes.getProductName().equals(this.productName)) && allVulnerabilitiesMatch) ? 1 : 0;			
		}

		public String getProductName() {
			return productName;
		}

		public ArrayList<String> getCveIDs() {
			return cveIDs;
		}
		
		@Override
		public String toString() {
			return productName + cveIDs.toString();
		}
		
	}

	/**
	 * Import the CVE test data for comparison from a given CSV file.
	 */
	private ArrayList<VulnerabilitySearchResult> readControlResultCSVData(){
		ArrayList<VulnerabilitySearchResult> controlResults = new ArrayList<>();		
        BufferedReader br = null;
        String line = "";

        try {
            br = new BufferedReader(new FileReader(controlResultsFileLocation));
            while ((line = br.readLine()) != null) {
                String[] vsrString = line.split(",");
                ArrayList<String> cves = new ArrayList<>();
                
                for(int i = 1; i < vsrString.length; i++) {
                	cves.add(vsrString[i].replace("\"", "").replace(" ", ""));
				}  
                
            	controlResults.add(new VulnerabilitySearchResult(vsrString[0], cves));      
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
            	try {
					br.close();
				} catch (IOException e) {
					//Do nothing;
				}               
            }
        }
        
        return controlResults;
    }	
	
	/**
	 * Calculate the recall and precision of a search method using an existing
	 *  list of control results.
	 * @param controlResults - An array of search results that should be found.
	 * @param actualResults - An array of the results actually found by the method.
	 */
	private void calculateRecallAndPrecision(ArrayList<VulnerabilitySearchResult> controlResults, ArrayList<VulnerabilitySearchResult> actualResults) {
		//CVE in actual results and CVE in control results.
		int truePositives = 0;
		//CVE in actual results, but not in control results.
		int falsePositives = 0;
		//CVE not in actual results, but in control results
		int falseNegatives = 0;
		int CVEsInControlResults = 0;
		
		//Get control results CVE size
		for (int i = 0; i < controlResults.size(); i++) {
			CVEsInControlResults += controlResults.get(i).getCveIDs().size();
		}
		
		for(VulnerabilitySearchResult ex : controlResults) {
			
			ArrayList<String> expect  = new ArrayList<>(ex.getCveIDs());
			ArrayList<String> actual = null;
			String productName = ex.getProductName();
			
			for(VulnerabilitySearchResult ac: actualResults) {
				if(ac.getProductName().equals(productName)) {
					actual = ac.getCveIDs();
					break;
				}
			}
			if(actual == null) {
				System.err.println("No actual results for: "+productName);
				continue;
			}
			
			for(String f : actual) {
				if(expect.remove(f))
					truePositives++;
				else {
					System.err.println("FalsePositive: "+productName+": "+f);
					falsePositives++;
				}
			}
			
			falseNegatives += expect.size();
		}
		
		float recall = truePositives / (float) (truePositives + falseNegatives);
		float precision = truePositives / (float) (truePositives + falsePositives);
		
		System.out.println("For " + CVEsInControlResults + " CVE entries in the control results there were: ");
		System.out.println("True positives: " + truePositives + " False positives: " + falsePositives + 
				" False negatives: " + falseNegatives + " ..in the actual results.");
		System.out.println("The recall for this method was: " + recall + " and the precision was: " + precision);
	}
	
	/**
	 * Method #1
	 * Get the a search result containing the project name and a list of CVEs.
	 * @param product the product name, for which the vulnerabilities should be sought.
	 * @return A single vulnerability search result.
	 */
	private VulnerabilitySearchResult getCVEsOfProductByProductName(String product){
		ArrayList<Document> results = VDQH.getVulnerabilities(product, "");
		ArrayList<String> cveIDs = new ArrayList<String>();
		
		if(!results.isEmpty()) {
			for (Document document : results) {
				cveIDs.add(document.getString("_id"));
			}
		}
		
		return new VulnerabilitySearchResult(product, cveIDs);
	}
	
	//protected void compareSearchResultData(ArrayList<VulnerabilitySearchResult> controlResults, 
	//ArrayList<VulnerabilitySearchResult> actualResults) 	
	
	@Test
	public void compareSearchResultData() {
		ArrayList<VulnerabilitySearchResult> controlResults = readControlResultCSVData();
		ArrayList<String> productNamesOfControlResults = new ArrayList<String>();
		ArrayList<VulnerabilitySearchResult> actualResults = new ArrayList<VulnerabilitySearchResult>();
		
		for (VulnerabilitySearchResult controlResult : controlResults) {
			productNamesOfControlResults.add(controlResult.productName);
		}
		
		System.out.println("Using search method #1: search by product name: ");
		for (String productName : productNamesOfControlResults) {			
			VulnerabilitySearchResult actualSearchResult = getCVEsOfProductByProductName(productName);
			actualResults.add(actualSearchResult);
		}
		
		calculateRecallAndPrecision(controlResults, actualResults);
	}
}
