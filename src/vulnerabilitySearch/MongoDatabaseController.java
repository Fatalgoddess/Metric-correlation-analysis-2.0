package vulnerabilitySearch;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import org.junit.jupiter.api.Test;

public class MongoDatabaseController {

	public static boolean windows = System.getProperty("os.name").toLowerCase().indexOf("windows") >= 0;
	public static boolean linux = System.getProperty("os.name").toLowerCase().indexOf("linux") >= 0;

	// TODO: Make eclipse recognize environment variables
	protected final String env_mongod = "/usr/bin/mongod"; // "MONGOD"
	protected static String vulnerability_database_location = "VulnerabilityData";

	private Process startMongoDB(String databaseLocation, Process p) throws IOException {
		ProcessBuilder pb = new ProcessBuilder(env_mongod, "--storageEngine=mmapv1", "--dbpath",
				vulnerability_database_location);
		pb.redirectErrorStream(true);

		try {
			p = pb.start();

			// Check if mongo started OK
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String line;
			while ((line = br.readLine()) != null) {
				if (line.contains("shutting down") || line.contains("failed")) {
					p.destroyForcibly();
					throw new IOException(line);
				}
				if (line.contains("waiting")) {
					System.out.println("MongoDB: " + line);
					break;
				}
				System.out.println("MongoDB: " + line);
			}
		} catch (IOException e) {
			System.err.println("Could not start MongoDB Process!");
			e.printStackTrace();
		}

		return p;
	}

	protected void addJSONtoMongoDB(String databaseName, String collectionName, String fileName) throws IOException {
		if (windows) {
			// TODO: Add windows command
		}

		else if (linux) {
			try {
				ProcessBuilder pb = new ProcessBuilder("mongoimport", "--jsonArray", "--db", databaseName,
						"--collection", collectionName, "--file", fileName);
				Process v = pb.start();
				pb.redirectErrorStream(true);
				
				BufferedReader br = new BufferedReader(new InputStreamReader(v.getInputStream()));
				String line;
				while ((line = br.readLine()) != null) {
					System.out.println(line);
					}
				
				v.waitFor();

			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				System.err.println("Could not add JSON to database.");
			}
		}

		else {
			System.err.println("Unsupported OS at vulnerability database initialization.");
		}
	}

	
	public void execute() throws IOException {
		VulnerabilityDataDownloader.createDirectory(vulnerability_database_location);

		Process p = null;
		p = startMongoDB(vulnerability_database_location, p);



		// getVulnerabilities(firefox);

		// close the database
		System.out.println("Shutting down MongoDB");
		p.destroyForcibly();
	}

}
