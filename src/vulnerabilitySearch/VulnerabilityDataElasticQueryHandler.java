package vulnerabilitySearch;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import org.apache.http.HttpHost;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.index.query.FuzzyQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.junit.Test;
import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * @author Antoniya Ivanova Defines the vulnerability database queries
 *
 */

public class VulnerabilityDataElasticQueryHandler {
	
	private static final String INDEX_NAME = VulnerabilityDataToElasticImporter.vulnerabilityDatabaseName;
    private static final String INDEX_TYPE = "doc";
	private RestHighLevelClient elasticClient;
	
	public VulnerabilityDataElasticQueryHandler(){
		elasticClient = new RestHighLevelClient(
		        RestClient.builder(
		                new HttpHost("localhost", 9200, "http")));
	}
	
	/**
	 * Get the vulnerabilities for a given (product,version,fuzzyness) triple.
	 * @param product - product name
	 * @param version - version name as string or * for all. 
	 * @param fuzzyness - the fuzzyness level of the search ("ZERO","ONE","TWO","AUTO")
	 * Leave version empty to get all product vulnerabilities.
	 * @return An ArrayList of the resulting search hits from the database
	 */
	protected ArrayList<SearchHit> getVulnerabilities(String product, String version, String fuzzyness) {
		SearchRequest searchRequest = new SearchRequest(INDEX_NAME).types(INDEX_TYPE);
		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
		searchSourceBuilder.size(1000); 
		ArrayList<SearchHit> results = new ArrayList<SearchHit>();
		
		FuzzyQueryBuilder queryBuilder = null;
		
		switch (fuzzyness) {
		case "ZERO":
			queryBuilder = QueryBuilders.fuzzyQuery("Product", product).maxExpansions(4)
			.prefixLength(1).fuzziness(Fuzziness.ZERO).transpositions(true);
			break;
		case "ONE":
			queryBuilder = QueryBuilders.fuzzyQuery("Product", product).maxExpansions(4)
			.prefixLength(1).fuzziness(Fuzziness.ONE).transpositions(true);			break;
		case "TWO":
			queryBuilder = QueryBuilders.fuzzyQuery("Product", product).maxExpansions(4)
			.prefixLength(1).fuzziness(Fuzziness.TWO).transpositions(true);		break;
		case "AUTO":
			queryBuilder = QueryBuilders.fuzzyQuery("Product", product).maxExpansions(4)
			.prefixLength(1).fuzziness(Fuzziness.AUTO).transpositions(true);
			break;
		}	
		
		if(version != "") {
			System.out.println("Searching for vulnerabilities of: " + product + ", version " + version + ".");
			searchSourceBuilder.query(termQuery("Versions", version));
		} else {
			System.out.println("Searching for vulnerabilities of: " + product + " without version information.");
		}
		
		searchSourceBuilder.query(queryBuilder); 	
		searchRequest.source(searchSourceBuilder); 
		SearchResponse searchResponse;
		
		try {
			searchResponse = elasticClient.search(searchRequest);
			SearchHits hits = searchResponse.getHits();
			
			SearchHit[] searchHits = hits.getHits();
			
			if(searchHits.length == 0) {
				System.out.println("No vulnerabilities found for " + product + ".");
			} else {
			
				for (SearchHit hit : searchHits) {
					String sourceAsString = hit.getSourceAsString();
					System.out.println(sourceAsString);
					results.add(hit);
					}	
			}
			
		} catch (IOException e) {
			System.err.println("Could not get a search response.");
			e.printStackTrace();
		}	
		
		return results;
	}
	
	/**
	 * Get the average for a given property and result array from the database
	 * @param documents - the result array
	 * @param property - the property to average
	 * @return a double value for the average
	 */
	protected double getAverage(ArrayList<SearchHit> documents, String property) {
		double total = 0;
		int size = documents.size();
		
		for (SearchHit searchHit : documents) {
			Map<String, Object> searchHitMap = searchHit.getSourceAsMap();
			total += (double) searchHitMap.get(property);
		}
		
		return total/size;
	}
	
	protected double getAverageCVSS3Score(String product, String version, String fuzzyness) {
		ArrayList<SearchHit> results = getVulnerabilities(product, version, fuzzyness);
		return getAverage(results,"CVSS3_baseScore");
	}
	
	protected double getAverageCVSS2Score(String product, String version, String fuzzyness) {
		ArrayList<SearchHit> results = getVulnerabilities(product, version, fuzzyness);
		return getAverage(results,"CVSS2_baseScore");
	}
	
	protected int getNumberOfVulnerabilities(String product, String version, String fuzzyness) {
		ArrayList<SearchHit> results = getVulnerabilities(product, version, fuzzyness);
		return results.size();
	}

	@Test
	public void testVulnerabilitySearch() {
		//TODO: Maybe write a method which returns everything at once.		
//		System.out.println(getVulnerabilities("frogcms", "", "ONE"));
//		System.out.println(getVulnerabilities("wowroster", "1.5", "ONE"));
		System.out.println(getNumberOfVulnerabilities("signaldesktop ", "", "ONE"));
//		System.out.println(getAverageCVSS2Score("wowroster", "1.5", "ONE"));
//		System.out.println(getAverageCVSS3Score("wowroster", "1.5", "ONE"));
//		System.out.println(getVulnerabilities("spring-boot", ""));
	}
	
}
